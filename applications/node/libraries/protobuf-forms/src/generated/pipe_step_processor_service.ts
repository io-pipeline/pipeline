// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.21.12
// source: pipe_step_processor_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Struct } from "./google/protobuf/struct";
import { Timestamp } from "./google/protobuf/timestamp";
import { ErrorData, PipeDoc, StepExecutionRecord } from "./pipeline_core_types";

export const protobufPackage = "io.pipeline.search.model";

/** Request for module registration, optionally includes test data for health check */
export interface RegistrationRequest {
  /** Optional test data for validation - if provided, module will perform health check */
  testRequest?: ModuleProcessRequest | undefined;
}

/** Response containing module registration data and health status */
export interface ServiceRegistrationResponse {
  /**
   * --- Core Identity & Validation (Machine-Readable) ---
   * Unique, machine-readable identifier for the module (e.g., "acme-text-chunker-v2").
   */
  moduleName: string;
  /** Semantic version of the module itself (e.g., "1.2.1"). */
  version: string;
  /** JSON schema for validating the 'custom_json_config' in a pipeline step. */
  jsonConfigSchema?:
    | string
    | undefined;
  /**
   * --- UI & Developer Experience (Human-Readable) ---
   * A clean, human-friendly name for display in UIs (e.g., "Acme Text Chunker").
   */
  displayName?:
    | string
    | undefined;
  /** A brief summary of the module's purpose. */
  description?:
    | string
    | undefined;
  /** The team or individual responsible for maintaining this module. */
  owner?:
    | string
    | undefined;
  /** A URL to more detailed documentation. */
  documentationUrl?:
    | string
    | undefined;
  /** Tags for filtering and categorization in UIs (e.g., "nlp", "enrichment"). */
  tags: string[];
  /**
   * --- Health & Operational Status ---
   * Whether the health check passed (true if no test_request provided).
   */
  healthCheckPassed: boolean;
  /** Health check message - error details if failed, success message if passed. */
  healthCheckMessage: string;
  /** Timestamp of when this registration data was generated. */
  registrationTimestamp:
    | Date
    | undefined;
  /**
   * --- Engine & Runtime Intelligence ---
   * Information about the server process hosting the module (e.g., hostname, IP).
   */
  serverInfo: string;
  /** The version of the pipeline SDK the module was compiled against (e.g., "0.5.0"). */
  sdkVersion: string;
  /** List of critical external dependencies (e.g., "chunker module", "database.prod.acme.com", "OpenAI API"). */
  dependencies: string[];
  /** Flexible key-value pairs for any other developer-defined metadata. */
  metadata: { [key: string]: string };
}

export interface ServiceRegistrationResponse_MetadataEntry {
  key: string;
  value: string;
}

/**
 * Contains metadata provided by the pipeline engine for context.
 * This data is generally for informational purposes, logging, tracing, or advanced conditional logic.
 */
export interface ServiceMetadata {
  /** The 'pipelineName' from PipelineConfig providing context for this call. */
  pipelineName: string;
  /** The 'stepName' from PipelineStepConfig that this gRPC service instance is currently executing as. */
  pipeStepName: string;
  /** Unique ID for the entire execution flow (equivalent to PipeStream.stream_id). */
  streamId: string;
  /** The current hop number in the pipeline for this step's execution. */
  currentHopNumber: number;
  /**
   * History of previously executed steps in this stream.
   * Note: This can be large. Modules should use it judiciously.
   */
  history: StepExecutionRecord[];
  /**
   * If the overall stream was previously marked with a critical error.
   * Modules might use this to alter behavior (e.g., skip processing if stream is already failed).
   */
  streamErrorData?:
    | ErrorData
    | undefined;
  /**
   * Key-value parameters for the entire run's context (e.g., tenant_id, user_id, correlation_id).
   * Equivalent to PipeStream.context_params.
   */
  contextParams: { [key: string]: string };
}

export interface ServiceMetadata_ContextParamsEntry {
  key: string;
  value: string;
}

/** Contains configuration specific to this instance of the pipeline step. */
export interface ProcessConfiguration {
  /**
   * The specific, validated custom JSON configuration for this step,
   * converted by the engine from PipelineStepConfig.customConfig.jsonConfig.
   */
  customJsonConfig:
    | { [key: string]: any }
    | undefined;
  /** The 'configParams' map from PipelineStepConfig for this step. */
  configParams: { [key: string]: string };
}

export interface ProcessConfiguration_ConfigParamsEntry {
  key: string;
  value: string;
}

/** Request message for the ProcessData RPC. */
export interface ModuleProcessRequest {
  /**
   * The primary document data to be processed.
   * The Blob is now expected to be within PipeDoc if used.
   */
  document:
    | PipeDoc
    | undefined;
  /** Configuration for this specific processing step. */
  config:
    | ProcessConfiguration
    | undefined;
  /** Engine-provided metadata for context and observability. */
  metadata: ServiceMetadata | undefined;
}

/**
 * Response message for the ProcessData RPC.
 * This is returned by the gRPC Service Implementation back to the engine.
 * Renamed to avoid confusion with engine ProcessResponse.
 */
export interface ModuleProcessResponse {
  /** Outcome: True if this step's processing was successful, false otherwise. */
  success: boolean;
  /**
   * Output Data: The modified or newly created PipeDoc.
   * either remains unchanged or that this step does not modify the PipeDoc directly.
   * The Blob is part of the PipeDoc.
   */
  outputDoc?:
    | PipeDoc
    | undefined;
  /**
   * Error Details: Structured error information from *this processor* if success is false.
   * This is for errors specific to the processor's execution logic.
   */
  errorDetails?:
    | { [key: string]: any }
    | undefined;
  /** Logging: Logs or summary information generated by this processor step. */
  processorLogs: string[];
}

function createBaseRegistrationRequest(): RegistrationRequest {
  return { testRequest: undefined };
}

export const RegistrationRequest: MessageFns<RegistrationRequest> = {
  encode(message: RegistrationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.testRequest !== undefined) {
      ModuleProcessRequest.encode(message.testRequest, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegistrationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegistrationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.testRequest = ModuleProcessRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegistrationRequest {
    return { testRequest: isSet(object.testRequest) ? ModuleProcessRequest.fromJSON(object.testRequest) : undefined };
  },

  toJSON(message: RegistrationRequest): unknown {
    const obj: any = {};
    if (message.testRequest !== undefined) {
      obj.testRequest = ModuleProcessRequest.toJSON(message.testRequest);
    }
    return obj;
  },
};

function createBaseServiceRegistrationResponse(): ServiceRegistrationResponse {
  return {
    moduleName: "",
    version: "",
    jsonConfigSchema: undefined,
    displayName: undefined,
    description: undefined,
    owner: undefined,
    documentationUrl: undefined,
    tags: [],
    healthCheckPassed: false,
    healthCheckMessage: "",
    registrationTimestamp: undefined,
    serverInfo: "",
    sdkVersion: "",
    dependencies: [],
    metadata: {},
  };
}

export const ServiceRegistrationResponse: MessageFns<ServiceRegistrationResponse> = {
  encode(message: ServiceRegistrationResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.moduleName !== "") {
      writer.uint32(10).string(message.moduleName);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.jsonConfigSchema !== undefined) {
      writer.uint32(26).string(message.jsonConfigSchema);
    }
    if (message.displayName !== undefined) {
      writer.uint32(34).string(message.displayName);
    }
    if (message.description !== undefined) {
      writer.uint32(42).string(message.description);
    }
    if (message.owner !== undefined) {
      writer.uint32(50).string(message.owner);
    }
    if (message.documentationUrl !== undefined) {
      writer.uint32(58).string(message.documentationUrl);
    }
    for (const v of message.tags) {
      writer.uint32(66).string(v!);
    }
    if (message.healthCheckPassed !== false) {
      writer.uint32(72).bool(message.healthCheckPassed);
    }
    if (message.healthCheckMessage !== "") {
      writer.uint32(82).string(message.healthCheckMessage);
    }
    if (message.registrationTimestamp !== undefined) {
      Timestamp.encode(toTimestamp(message.registrationTimestamp), writer.uint32(90).fork()).join();
    }
    if (message.serverInfo !== "") {
      writer.uint32(98).string(message.serverInfo);
    }
    if (message.sdkVersion !== "") {
      writer.uint32(106).string(message.sdkVersion);
    }
    for (const v of message.dependencies) {
      writer.uint32(114).string(v!);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      ServiceRegistrationResponse_MetadataEntry.encode({ key: key as any, value }, writer.uint32(122).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceRegistrationResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceRegistrationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.moduleName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.jsonConfigSchema = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.displayName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.documentationUrl = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tags.push(reader.string());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.healthCheckPassed = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.healthCheckMessage = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.registrationTimestamp = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.serverInfo = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.sdkVersion = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.dependencies.push(reader.string());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          const entry15 = ServiceRegistrationResponse_MetadataEntry.decode(reader, reader.uint32());
          if (entry15.value !== undefined) {
            message.metadata[entry15.key] = entry15.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceRegistrationResponse {
    return {
      moduleName: isSet(object.moduleName) ? globalThis.String(object.moduleName) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      jsonConfigSchema: isSet(object.jsonConfigSchema) ? globalThis.String(object.jsonConfigSchema) : undefined,
      displayName: isSet(object.displayName) ? globalThis.String(object.displayName) : undefined,
      description: isSet(object.description) ? globalThis.String(object.description) : undefined,
      owner: isSet(object.owner) ? globalThis.String(object.owner) : undefined,
      documentationUrl: isSet(object.documentationUrl) ? globalThis.String(object.documentationUrl) : undefined,
      tags: globalThis.Array.isArray(object?.tags) ? object.tags.map((e: any) => globalThis.String(e)) : [],
      healthCheckPassed: isSet(object.healthCheckPassed) ? globalThis.Boolean(object.healthCheckPassed) : false,
      healthCheckMessage: isSet(object.healthCheckMessage) ? globalThis.String(object.healthCheckMessage) : "",
      registrationTimestamp: isSet(object.registrationTimestamp)
        ? fromJsonTimestamp(object.registrationTimestamp)
        : undefined,
      serverInfo: isSet(object.serverInfo) ? globalThis.String(object.serverInfo) : "",
      sdkVersion: isSet(object.sdkVersion) ? globalThis.String(object.sdkVersion) : "",
      dependencies: globalThis.Array.isArray(object?.dependencies)
        ? object.dependencies.map((e: any) => globalThis.String(e))
        : [],
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ServiceRegistrationResponse): unknown {
    const obj: any = {};
    if (message.moduleName !== "") {
      obj.moduleName = message.moduleName;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.jsonConfigSchema !== undefined) {
      obj.jsonConfigSchema = message.jsonConfigSchema;
    }
    if (message.displayName !== undefined) {
      obj.displayName = message.displayName;
    }
    if (message.description !== undefined) {
      obj.description = message.description;
    }
    if (message.owner !== undefined) {
      obj.owner = message.owner;
    }
    if (message.documentationUrl !== undefined) {
      obj.documentationUrl = message.documentationUrl;
    }
    if (message.tags?.length) {
      obj.tags = message.tags;
    }
    if (message.healthCheckPassed !== false) {
      obj.healthCheckPassed = message.healthCheckPassed;
    }
    if (message.healthCheckMessage !== "") {
      obj.healthCheckMessage = message.healthCheckMessage;
    }
    if (message.registrationTimestamp !== undefined) {
      obj.registrationTimestamp = message.registrationTimestamp.toISOString();
    }
    if (message.serverInfo !== "") {
      obj.serverInfo = message.serverInfo;
    }
    if (message.sdkVersion !== "") {
      obj.sdkVersion = message.sdkVersion;
    }
    if (message.dependencies?.length) {
      obj.dependencies = message.dependencies;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseServiceRegistrationResponse_MetadataEntry(): ServiceRegistrationResponse_MetadataEntry {
  return { key: "", value: "" };
}

export const ServiceRegistrationResponse_MetadataEntry: MessageFns<ServiceRegistrationResponse_MetadataEntry> = {
  encode(message: ServiceRegistrationResponse_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceRegistrationResponse_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceRegistrationResponse_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceRegistrationResponse_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ServiceRegistrationResponse_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseServiceMetadata(): ServiceMetadata {
  return {
    pipelineName: "",
    pipeStepName: "",
    streamId: "",
    currentHopNumber: 0,
    history: [],
    streamErrorData: undefined,
    contextParams: {},
  };
}

export const ServiceMetadata: MessageFns<ServiceMetadata> = {
  encode(message: ServiceMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pipelineName !== "") {
      writer.uint32(10).string(message.pipelineName);
    }
    if (message.pipeStepName !== "") {
      writer.uint32(18).string(message.pipeStepName);
    }
    if (message.streamId !== "") {
      writer.uint32(26).string(message.streamId);
    }
    if (message.currentHopNumber !== 0) {
      writer.uint32(32).int64(message.currentHopNumber);
    }
    for (const v of message.history) {
      StepExecutionRecord.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.streamErrorData !== undefined) {
      ErrorData.encode(message.streamErrorData, writer.uint32(50).fork()).join();
    }
    Object.entries(message.contextParams).forEach(([key, value]) => {
      ServiceMetadata_ContextParamsEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.pipelineName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pipeStepName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.currentHopNumber = longToNumber(reader.int64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.history.push(StepExecutionRecord.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.streamErrorData = ErrorData.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = ServiceMetadata_ContextParamsEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.contextParams[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceMetadata {
    return {
      pipelineName: isSet(object.pipelineName) ? globalThis.String(object.pipelineName) : "",
      pipeStepName: isSet(object.pipeStepName) ? globalThis.String(object.pipeStepName) : "",
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      currentHopNumber: isSet(object.currentHopNumber) ? globalThis.Number(object.currentHopNumber) : 0,
      history: globalThis.Array.isArray(object?.history)
        ? object.history.map((e: any) => StepExecutionRecord.fromJSON(e))
        : [],
      streamErrorData: isSet(object.streamErrorData) ? ErrorData.fromJSON(object.streamErrorData) : undefined,
      contextParams: isObject(object.contextParams)
        ? Object.entries(object.contextParams).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ServiceMetadata): unknown {
    const obj: any = {};
    if (message.pipelineName !== "") {
      obj.pipelineName = message.pipelineName;
    }
    if (message.pipeStepName !== "") {
      obj.pipeStepName = message.pipeStepName;
    }
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.currentHopNumber !== 0) {
      obj.currentHopNumber = Math.round(message.currentHopNumber);
    }
    if (message.history?.length) {
      obj.history = message.history.map((e) => StepExecutionRecord.toJSON(e));
    }
    if (message.streamErrorData !== undefined) {
      obj.streamErrorData = ErrorData.toJSON(message.streamErrorData);
    }
    if (message.contextParams) {
      const entries = Object.entries(message.contextParams);
      if (entries.length > 0) {
        obj.contextParams = {};
        entries.forEach(([k, v]) => {
          obj.contextParams[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseServiceMetadata_ContextParamsEntry(): ServiceMetadata_ContextParamsEntry {
  return { key: "", value: "" };
}

export const ServiceMetadata_ContextParamsEntry: MessageFns<ServiceMetadata_ContextParamsEntry> = {
  encode(message: ServiceMetadata_ContextParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServiceMetadata_ContextParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServiceMetadata_ContextParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServiceMetadata_ContextParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ServiceMetadata_ContextParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseProcessConfiguration(): ProcessConfiguration {
  return { customJsonConfig: undefined, configParams: {} };
}

export const ProcessConfiguration: MessageFns<ProcessConfiguration> = {
  encode(message: ProcessConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.customJsonConfig !== undefined) {
      Struct.encode(Struct.wrap(message.customJsonConfig), writer.uint32(10).fork()).join();
    }
    Object.entries(message.configParams).forEach(([key, value]) => {
      ProcessConfiguration_ConfigParamsEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.customJsonConfig = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = ProcessConfiguration_ConfigParamsEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.configParams[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessConfiguration {
    return {
      customJsonConfig: isObject(object.customJsonConfig) ? object.customJsonConfig : undefined,
      configParams: isObject(object.configParams)
        ? Object.entries(object.configParams).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: ProcessConfiguration): unknown {
    const obj: any = {};
    if (message.customJsonConfig !== undefined) {
      obj.customJsonConfig = message.customJsonConfig;
    }
    if (message.configParams) {
      const entries = Object.entries(message.configParams);
      if (entries.length > 0) {
        obj.configParams = {};
        entries.forEach(([k, v]) => {
          obj.configParams[k] = v;
        });
      }
    }
    return obj;
  },
};

function createBaseProcessConfiguration_ConfigParamsEntry(): ProcessConfiguration_ConfigParamsEntry {
  return { key: "", value: "" };
}

export const ProcessConfiguration_ConfigParamsEntry: MessageFns<ProcessConfiguration_ConfigParamsEntry> = {
  encode(message: ProcessConfiguration_ConfigParamsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcessConfiguration_ConfigParamsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcessConfiguration_ConfigParamsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcessConfiguration_ConfigParamsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ProcessConfiguration_ConfigParamsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },
};

function createBaseModuleProcessRequest(): ModuleProcessRequest {
  return { document: undefined, config: undefined, metadata: undefined };
}

export const ModuleProcessRequest: MessageFns<ModuleProcessRequest> = {
  encode(message: ModuleProcessRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.document !== undefined) {
      PipeDoc.encode(message.document, writer.uint32(10).fork()).join();
    }
    if (message.config !== undefined) {
      ProcessConfiguration.encode(message.config, writer.uint32(18).fork()).join();
    }
    if (message.metadata !== undefined) {
      ServiceMetadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModuleProcessRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleProcessRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.document = PipeDoc.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.config = ProcessConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = ServiceMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModuleProcessRequest {
    return {
      document: isSet(object.document) ? PipeDoc.fromJSON(object.document) : undefined,
      config: isSet(object.config) ? ProcessConfiguration.fromJSON(object.config) : undefined,
      metadata: isSet(object.metadata) ? ServiceMetadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: ModuleProcessRequest): unknown {
    const obj: any = {};
    if (message.document !== undefined) {
      obj.document = PipeDoc.toJSON(message.document);
    }
    if (message.config !== undefined) {
      obj.config = ProcessConfiguration.toJSON(message.config);
    }
    if (message.metadata !== undefined) {
      obj.metadata = ServiceMetadata.toJSON(message.metadata);
    }
    return obj;
  },
};

function createBaseModuleProcessResponse(): ModuleProcessResponse {
  return { success: false, outputDoc: undefined, errorDetails: undefined, processorLogs: [] };
}

export const ModuleProcessResponse: MessageFns<ModuleProcessResponse> = {
  encode(message: ModuleProcessResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.outputDoc !== undefined) {
      PipeDoc.encode(message.outputDoc, writer.uint32(18).fork()).join();
    }
    if (message.errorDetails !== undefined) {
      Struct.encode(Struct.wrap(message.errorDetails), writer.uint32(26).fork()).join();
    }
    for (const v of message.processorLogs) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ModuleProcessResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModuleProcessResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.outputDoc = PipeDoc.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.errorDetails = Struct.unwrap(Struct.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.processorLogs.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ModuleProcessResponse {
    return {
      success: isSet(object.success) ? globalThis.Boolean(object.success) : false,
      outputDoc: isSet(object.outputDoc) ? PipeDoc.fromJSON(object.outputDoc) : undefined,
      errorDetails: isObject(object.errorDetails) ? object.errorDetails : undefined,
      processorLogs: globalThis.Array.isArray(object?.processorLogs)
        ? object.processorLogs.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ModuleProcessResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    if (message.outputDoc !== undefined) {
      obj.outputDoc = PipeDoc.toJSON(message.outputDoc);
    }
    if (message.errorDetails !== undefined) {
      obj.errorDetails = message.errorDetails;
    }
    if (message.processorLogs?.length) {
      obj.processorLogs = message.processorLogs;
    }
    return obj;
  },
};

/**
 * Service definition for a pipeline step processor.
 * This interface is implemented by developer-created gRPC modules/services.
 */
export interface PipeStepProcessor {
  /** Processes a document according to the step's configuration and logic. */
  ProcessData(request: ModuleProcessRequest): Promise<ModuleProcessResponse>;
  /**
   * Test version of ProcessData that doesn't count as a legitimate call
   * but follows the same processing logic
   */
  TestProcessData(request: ModuleProcessRequest): Promise<ModuleProcessResponse>;
  /** Returns static registration information about this module with optional health check */
  GetServiceRegistration(request: RegistrationRequest): Promise<ServiceRegistrationResponse>;
}

export const PipeStepProcessorServiceName = "io.pipeline.search.model.PipeStepProcessor";
export class PipeStepProcessorClientImpl implements PipeStepProcessor {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || PipeStepProcessorServiceName;
    this.rpc = rpc;
    this.ProcessData = this.ProcessData.bind(this);
    this.TestProcessData = this.TestProcessData.bind(this);
    this.GetServiceRegistration = this.GetServiceRegistration.bind(this);
  }
  ProcessData(request: ModuleProcessRequest): Promise<ModuleProcessResponse> {
    const data = ModuleProcessRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ProcessData", data);
    return promise.then((data) => ModuleProcessResponse.decode(new BinaryReader(data)));
  }

  TestProcessData(request: ModuleProcessRequest): Promise<ModuleProcessResponse> {
    const data = ModuleProcessRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "TestProcessData", data);
    return promise.then((data) => ModuleProcessResponse.decode(new BinaryReader(data)));
  }

  GetServiceRegistration(request: RegistrationRequest): Promise<ServiceRegistrationResponse> {
    const data = RegistrationRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetServiceRegistration", data);
    return promise.then((data) => ServiceRegistrationResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
}
