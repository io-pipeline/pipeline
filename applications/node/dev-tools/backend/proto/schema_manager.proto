syntax = "proto3";

package io.pipeline.schemamanager.v1;

import "google/protobuf/wrappers.proto";

option java_package = "io.pipeline.schemamanager.v1";
option java_multiple_files = true;

// The SchemaManagerService is responsible for dynamically managing OpenSearch index schemas.
// It provides an idempotent API to ensure that the necessary mappings exist for the "Embedded Object" strategy.
service SchemaManagerService {
  // Ensures that the index has a 'nested' field configured for storing chunked embeddings.
  // This operation is idempotent. It checks for the existence of the nested mapping
  // and only creates or updates it if necessary, using a distributed lock to prevent race conditions.
  rpc EnsureNestedEmbeddingsFieldExists(EnsureNestedEmbeddingsFieldExistsRequest) returns (EnsureNestedEmbeddingsFieldExistsResponse);
}

message EnsureNestedEmbeddingsFieldExistsRequest {
  // The name of the OpenSearch index to check and potentially update.
  // Example: "pipeline-articles-v1"
  string index_name = 1;

  // The name of the nested field that will contain the array of embedding objects.
  // Example: "embeddings"
  string nested_field_name = 2;

  // The definition for the 'vector' field that will live inside the nested objects.
  VectorFieldDefinition vector_field_definition = 3;
}

// Defines the configuration for a knn_vector field.
message VectorFieldDefinition {
  // The number of dimensions in the vector. This is mandatory.
  int32 dimension = 1;

  // The k-NN method definition, containing the engine, space type, and tuning parameters.
  KnnMethodDefinition knn_method = 2;
}

// Defines the k-NN method and its parameters, mirroring the user-facing configuration.
message KnnMethodDefinition {
  enum KnnEngine {
    LUCENE = 0;
  }

  enum SpaceType {
    L2 = 0;
    COSINESIMIL = 1;
    INNERPRODUCT = 2;
  }

  KnnEngine engine = 1;
  SpaceType space_type = 2;
  KnnParametersDefinition parameters = 3;
}

// Defines the tuning parameters for the HNSW algorithm.
// Using google.protobuf.Int32Value allows us to distinguish between a value of 0 and an omitted field.
message KnnParametersDefinition {
  google.protobuf.Int32Value m = 1;
  google.protobuf.Int32Value ef_construction = 2;
  google.protobuf.Int32Value ef_search = 3;
}

message EnsureNestedEmbeddingsFieldExistsResponse {
  // True if the nested embeddings field already existed and was correctly configured.
  bool schema_existed = 1;
}