syntax = "proto3";

package io.pipeline.repository.filesystem;

// Import the 'Any' type, which allows us to embed arbitrary message types.
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

option java_package = "io.pipeline.repository.filesystem";
option java_multiple_files = true;
option java_outer_classname = "FilesystemServiceProto";

// Drive information for isolated filesystem namespaces
message Drive {
  string name = 1;          // Drive name (no colons allowed)
  string description = 2;   // Human-readable description
  google.protobuf.Timestamp created_at = 3;
  google.protobuf.Timestamp last_accessed = 4;
  int64 total_size = 5;     // Total size in bytes
  int64 node_count = 6;     // Total number of nodes
  map<string, string> metadata = 7; // Drive metadata
}

// The central Node message, representing a file or a folder in the virtual filesystem.
message Node {
  enum NodeType {
    NODE_TYPE_UNSPECIFIED = 0;
    FOLDER = 1;
    FILE = 2;
  }

  string id = 1;         // Unique identifier (MongoDB ObjectId as a string)
  string parent_id = 2;  // ID of the parent folder (empty for root)
  string name = 3;       // Display name of the node
  NodeType type = 4;     // Whether this is a FOLDER or a FILE
  
  // If the node is a FILE, this field holds the specific data payload.
  // For PipeDoc storage, this would be the PipeDoc message
  google.protobuf.Any payload = 5;
  
  // Metadata
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp updated_at = 7;
  int64 size = 8;        // Size in bytes (for files)
  string mime_type = 9;  // MIME type (for files)
  
  // Path information (materialized path for efficient queries)
  string path = 10;      // Ancestor path, e.g., ",root_id,folder_id,"
  
  // Additional metadata as key-value pairs
  map<string, string> metadata = 11;
  
  // Visual and type information
  string icon_svg = 12;     // SVG icon for visual representation
  string service_type = 13; // Service interface type (e.g., "PipeStepProcessor", "Parser")
  string payload_type = 14; // Actual payload type (e.g., "ModuleProcessRequest", "ModuleProcessResponse")
}

// Service definition for filesystem operations
service FilesystemService {
  // Drive management operations
  rpc CreateDrive(CreateDriveRequest) returns (Drive);
  rpc GetDrive(GetDriveRequest) returns (Drive);
  rpc ListDrives(ListDrivesRequest) returns (ListDrivesResponse);
  rpc DeleteDrive(DeleteDriveRequest) returns (DeleteDriveResponse);
  
  // Node CRUD operations
  rpc CreateNode(CreateNodeRequest) returns (Node);
  rpc GetNode(GetNodeRequest) returns (Node);
  rpc UpdateNode(UpdateNodeRequest) returns (Node);
  rpc DeleteNode(DeleteNodeRequest) returns (DeleteNodeResponse);
  
  // Navigation operations
  rpc GetChildren(GetChildrenRequest) returns (GetChildrenResponse);
  rpc GetPath(GetPathRequest) returns (GetPathResponse);
  rpc GetTree(GetTreeRequest) returns (GetTreeResponse);
  
  // Move and copy operations
  rpc MoveNode(MoveNodeRequest) returns (Node);
  rpc CopyNode(CopyNodeRequest) returns (Node);
  
  // Search operations
  rpc SearchNodes(SearchNodesRequest) returns (SearchNodesResponse);
  
  // Format operations for filesystem
  rpc FormatFilesystem(FormatFilesystemRequest) returns (FormatFilesystemResponse);
}

// Request and Response messages

message CreateNodeRequest {
  string drive = 1;         // Drive name (required - no default drive)
  string parent_id = 2;     // Parent folder ID (empty for root)
  string name = 3;          // Node name
  Node.NodeType type = 4;   // FOLDER or FILE
  google.protobuf.Any payload = 5;  // File content (for FILE type)
  map<string, string> metadata = 6; // Additional metadata
}

message GetNodeRequest {
  string drive = 1;         // Drive name (required)
  string id = 2;
}

message UpdateNodeRequest {
  string drive = 1;         // Drive name (required)
  string id = 2;
  string name = 3;          // New name (optional)
  google.protobuf.Any payload = 4;  // New content (optional, for files)
  map<string, string> metadata = 5; // Updated metadata (optional)
}

message DeleteNodeRequest {
  string drive = 1;         // Drive name (required)
  string id = 2;
  bool recursive = 3;       // Delete children for folders
}

message DeleteNodeResponse {
  bool success = 1;
  int32 deleted_count = 2;  // Number of nodes deleted (including children)
}

message GetChildrenRequest {
  string drive = 1;         // Drive name (required)
  string parent_id = 2;     // Parent folder ID (empty for root)
  int32 page_size = 3;      // Pagination
  string page_token = 4;    // Pagination token
  string order_by = 5;      // Sort field (name, created_at, etc.)
  bool ascending = 6;       // Sort order
}

message GetChildrenResponse {
  repeated Node nodes = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message GetPathRequest {
  string drive = 1;         // Drive name (required)
  string id = 2;            // Node ID to get path for
}

message GetPathResponse {
  repeated Node ancestors = 1;  // Path from root to node (inclusive)
}

message GetTreeRequest {
  string drive = 1;         // Drive name (required)
  string root_id = 2;       // Starting node (empty for absolute root)
  int32 max_depth = 3;      // Maximum depth to traverse
}

message GetTreeResponse {
  Node root = 1;
  repeated TreeNode children = 2;
}

message TreeNode {
  Node node = 1;
  repeated TreeNode children = 2;
}

message MoveNodeRequest {
  string drive = 1;         // Drive name (required)
  string node_id = 2;
  string new_parent_id = 3;
  string new_name = 4;      // Optional rename during move
}

message CopyNodeRequest {
  string drive = 1;         // Drive name (required)
  string node_id = 2;
  string target_parent_id = 3;
  string new_name = 4;      // Optional rename during copy
  bool deep = 5;            // Deep copy for folders
}

message SearchNodesRequest {
  string drive = 1;         // Drive name (required)
  string query = 2;         // Search query
  repeated string paths = 3;  // Limit search to these paths
  repeated Node.NodeType types = 4;  // Filter by node types
  map<string, string> metadata_filters = 5;  // Filter by metadata
  int32 page_size = 6;
  string page_token = 7;
}

message SearchNodesResponse {
  repeated Node nodes = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

// Format filesystem messages
message FormatFilesystemRequest {
  string drive = 1;         // Drive name (required)
  string confirmation = 2;  // Must be "DELETE_FILESYSTEM_DATA" to proceed
  repeated string type_urls = 3; // Optional: only delete nodes with these payload types
  bool dry_run = 4;         // If true, return what would be deleted without deleting
}

message FormatFilesystemResponse {
  bool success = 1;
  string message = 2;
  int32 nodes_deleted = 3;
  int32 folders_deleted = 4;
  map<string, int32> deleted_by_type = 5; // Count by payload type URL
  repeated string deleted_paths = 6; // Only populated if dry_run=true
}

// Drive management messages
message CreateDriveRequest {
  string name = 1;          // Drive name (no colons allowed)
  string description = 2;   // Optional description
  map<string, string> metadata = 3; // Optional metadata
}

message GetDriveRequest {
  string name = 1;          // Drive name
}

message ListDrivesRequest {
  int32 page_size = 1;      // Pagination
  string page_token = 2;    // Pagination token
  string filter = 3;        // Optional filter expression
}

message ListDrivesResponse {
  repeated Drive drives = 1;
  string next_page_token = 2;
  int32 total_count = 3;
}

message DeleteDriveRequest {
  string name = 1;          // Drive name to delete
  string confirmation = 2;  // Must be "DELETE_DRIVE_DATA" to proceed
}

message DeleteDriveResponse {
  bool success = 1;
  string message = 2;
  int32 nodes_deleted = 3;  // Total nodes deleted with the drive
}