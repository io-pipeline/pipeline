syntax = "proto3";

// Assuming your pipeline_core_types.proto is in io.pipeline.search.model
// and generates Java classes into io.pipeline.search.model
package io.pipeline.search.model; // Or io.pipeline.search.sdk if that's where PipeStepProcessor lives

option java_package = "io.pipeline.data.module"; // Or io.pipeline.search.model - for generated Java
option java_multiple_files = true;
option java_outer_classname = "PipeStepProcessorServiceProto";

// Import definitions from your core types file
import "pipeline_core_types.proto"; // This file should contain PipeDoc, Blob, StepExecutionRecord, ErrorData etc.
import "google/protobuf/struct.proto"; // For custom_json_config
import "google/protobuf/timestamp.proto";

// Service definition for a pipeline step processor.
// This interface is implemented by developer-created gRPC modules/services.
service PipeStepProcessor {
  // Processes a document according to the step's configuration and logic.
  rpc ProcessData(ModuleProcessRequest) returns (ModuleProcessResponse);

  // Test version of ProcessData that doesn't count as a legitimate call
  // but follows the same processing logic
  rpc TestProcessData(ModuleProcessRequest) returns (ModuleProcessResponse);

  // Returns static registration information about this module with optional health check
  rpc GetServiceRegistration (RegistrationRequest) returns (ServiceRegistrationResponse);
}

// Request for module registration, optionally includes test data for health check
message RegistrationRequest {
  // Optional test data for validation - if provided, module will perform health check
  optional ModuleProcessRequest test_request = 1;
}

// Response containing module registration data and health status
message ServiceRegistrationResponse {
  // --- Core Identity & Validation (Machine-Readable) ---
  // Unique, machine-readable identifier for the module (e.g., "acme-text-chunker-v2").
  string module_name = 1;
  // Semantic version of the module itself (e.g., "1.2.1").
  string version = 2;
  // JSON schema for validating the 'custom_json_config' in a pipeline step.
  optional string json_config_schema = 3;

  // --- UI & Developer Experience (Human-Readable) ---
  // A clean, human-friendly name for display in UIs (e.g., "Acme Text Chunker").
  optional string display_name = 4;
  // A brief summary of the module's purpose.
  optional string description = 5;
  // The team or individual responsible for maintaining this module.
  optional string owner = 6;
  // A URL to more detailed documentation.
  optional string documentation_url = 7;
  // Tags for filtering and categorization in UIs (e.g., "nlp", "enrichment").
  repeated string tags = 8;

  // --- Health & Operational Status ---
  // Whether the health check passed (true if no test_request provided).
  bool health_check_passed = 9;
  // Health check message - error details if failed, success message if passed.
  string health_check_message = 10;
  // Timestamp of when this registration data was generated.
  google.protobuf.Timestamp registration_timestamp = 11;

  // --- Engine & Runtime Intelligence ---
  // Information about the server process hosting the module (e.g., hostname, IP).
  string server_info = 12;
  // The version of the pipeline SDK the module was compiled against (e.g., "0.5.0").
  string sdk_version = 13;
  // List of critical external dependencies (e.g., "chunker module", "database.prod.acme.com", "OpenAI API").
  repeated string dependencies = 14;
  // Flexible key-value pairs for any other developer-defined metadata.
  map<string, string> metadata = 15;
  
  // Module capabilities for UI adaptation
  Capabilities capabilities = 16;
}

// Capabilities that describe the module's operational characteristics
message Capabilities {
  // List of capability types this module supports
  repeated CapabilityType types = 1;
  // Reserved for future capability-specific configuration
}

// Enumeration of module capability types
enum CapabilityType {
  // Default behavior - full editor
  CAPABILITY_TYPE_UNSPECIFIED = 0;
  
  // Module converts raw input (files, URLs) to documents
  PARSER = 1;
  
  // Future capabilities (commented until needed):
  // TRANSFORM = 2;           // Document to document modifications
  // EXTRACTOR = 3;           // One document to many
  // CHUNKER = 4;             // Splits content, owns SemanticResults
  // EMBEDDER = 5;            // Creates embeddings, owns Embedding
  // ENRICHER = 6;            // Adds metadata
  // SINK = 7;                // Outputs to external systems
  // FILTER = 8;              // Conditional routing
  // CONNECTOR_GIGO = 9;      // Simple data acceptance
  // CONNECTOR_SOURCE_AWARE = 10;  // Tracks source state
  // CONNECTOR_EXPLORATORY = 11;   // Discovers data dynamically
}

// Contains metadata provided by the pipeline engine for context.
// This data is generally for informational purposes, logging, tracing, or advanced conditional logic.
message ServiceMetadata {
  // The 'pipelineName' from PipelineConfig providing context for this call.
  string pipeline_name = 1;

  // The 'stepName' from PipelineStepConfig that this gRPC service instance is currently executing as.
  string pipe_step_name = 2;

  // Unique ID for the entire execution flow (equivalent to PipeStream.stream_id).
  string stream_id = 3;

  // The current hop number in the pipeline for this step's execution.
  int64 current_hop_number = 4;

  // History of previously executed steps in this stream.
  // Note: This can be large. Modules should use it judiciously.
  repeated StepExecutionRecord history = 5;

  // If the overall stream was previously marked with a critical error.
  // Modules might use this to alter behavior (e.g., skip processing if stream is already failed).
  optional ErrorData stream_error_data = 6;

  // Key-value parameters for the entire run's context (e.g., tenant_id, user_id, correlation_id).
  // Equivalent to PipeStream.context_params.
  map<string, string> context_params = 7;
}

// Contains configuration specific to this instance of the pipeline step.
message ProcessConfiguration {
  // The specific, validated custom JSON configuration for this step,
  // converted by the engine from PipelineStepConfig.customConfig.jsonConfig.
  google.protobuf.Struct custom_json_config = 1;

  // The 'configParams' map from PipelineStepConfig for this step.
  map<string, string> config_params = 2;
}

// Request message for the ProcessData RPC.
message ModuleProcessRequest {
  // The primary document data to be processed.
  // The Blob is now expected to be within PipeDoc if used.
  PipeDoc document = 1;

  // Configuration for this specific processing step.
  ProcessConfiguration config = 2;

  // Engine-provided metadata for context and observability.
  ServiceMetadata metadata = 3;
}

// Response message for the ProcessData RPC.
// This is returned by the gRPC Service Implementation back to the engine.
// Renamed to avoid confusion with engine ProcessResponse.
message ModuleProcessResponse {
  // Outcome: True if this step's processing was successful, false otherwise.
  bool success = 1;

  // Output Data: The modified or newly created PipeDoc.
  // either remains unchanged or that this step does not modify the PipeDoc directly.
  // The Blob is part of the PipeDoc.
  optional PipeDoc output_doc = 2;

  // Error Details: Structured error information from *this processor* if success is false.
  // This is for errors specific to the processor's execution logic.
  optional google.protobuf.Struct error_details = 3; // Using Struct for flexibility.

  // Logging: Logs or summary information generated by this processor step.
  repeated string processor_logs = 4;
}
