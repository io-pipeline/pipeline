quarkus.application.name=registration-service
quarkus.application.version=1.0.0-SNAPSHOT

# HTTP Server Configuration
# Standard port: 39100, Dev port: 38001
%dev.quarkus.http.port=38001
quarkus.http.port=39100

# gRPC Server Configuration
%dev.quarkus.grpc.server.port=38001
quarkus.grpc.server.port=39100
quarkus.grpc.server.use-separate-server=false

# gRPC Client Configuration (for REST bridge)
quarkus.grpc.clients.registration.host=localhost
%dev.quarkus.grpc.clients.registration.port=38001
quarkus.grpc.clients.registration.port=39100

# Consul Configuration
quarkus.consul-config.agent.host-port=consul:8500
%dev.quarkus.consul-config.agent.host-port=localhost:8500

# Custom Consul Watcher Configuration
consul.host=consul
consul.port=8500
%dev.consul.host=localhost
%dev.consul.port=8500

# Note: We handle Consul registration manually in RegistrationServiceSelfRegistration
# to have full control over the registration process

# Logging Configuration
quarkus.log.level=INFO

# Docker/Container Image Configuration
quarkus.container-image.build=false
quarkus.container-image.push=false
quarkus.container-image.group=pipeline
quarkus.container-image.name=registration-service
quarkus.container-image.tag=latest

# Use docker builder for custom Dockerfile support
quarkus.container-image.builder=docker

# Package type for better container layering
quarkus.package.type=fast-jar

# Docker specific settings
quarkus.docker.dockerfile-jvm-path=src/main/docker/Dockerfile.jvm
quarkus.docker.dockerfile-native-path=src/main/docker/Dockerfile.native

# Native image settings (when building native)
quarkus.native.container-build=true
quarkus.native.builder-image=quay.io/quarkus/ubi-quarkus-mandrel-builder-image:jdk-21


# Dev mode configuration
%dev.quarkus.test.continuous-testing=enabled
%dev.quarkus.test.display-test-output=true
%dev.quarkus.test.include-pattern=com.pipeline.registration.*
%dev.quarkus.test.exclude-pattern=com.rokkon.*
%dev.quarkus.class-loading.reloadable-artifacts=com.pipeline:*

# Disable analytics/telemetry
quarkus.analytics.disabled=true

# Note: Module discovery is handled dynamically at runtime
# No need to pre-configure specific modules here

# Disable auto-registration for the registration service itself
module.auto-register.enabled=false

# Dummy gRPC client config to satisfy CDI injection (won't be used since auto-register is disabled)
quarkus.grpc.clients.registration-service.host=localhost
quarkus.grpc.clients.registration-service.port=39100

# Pipeline consul configuration for GlobalModuleRegistryService
pipeline.consul.kv-prefix=pipeline
