<template>
  <div class="configure-client">
    <div class="page-header">
      <h1>Module Connection Manager</h1>
      <p>Manage connections to pipeline modules for testing and development</p>
      <!-- Debug info -->
      <div style="background: #f0f0f0; padding: 1rem; margin: 1rem 0; border-radius: 4px;">
        <strong>Debug:</strong> 
        existingModules.length = {{ existingModules.length }}, 
        savedData = {{ debugSavedData }}
        <button @click="loadExistingModules" style="margin-left: 1rem; padding: 0.25rem 0.5rem;">Reload</button>
      </div>
    </div>

    <!-- Existing Connections Section -->
    <div v-if="existingModules.length > 0" class="existing-connections">
      <h2>Existing Connections ({{ existingModules.length }})</h2>
      <div class="connections-grid">
        <div 
          v-for="module in existingModules" 
          :key="generateModuleId(module)"
          class="connection-card"
          :class="{ 'editing': isEditingModule(module), 'connected': module.status === 'connected' }"
          @click="editModule(module)"
        >
          <div class="connection-header">
            <div class="connection-title">
              <h3>{{ module.moduleType }}</h3>
              <div class="connection-status">
                <span class="status-dot" :class="getStatusClass(module.status)"></span>
                <span class="status-text">{{ getStatusText(module.status) }}</span>
              </div>
            </div>
            <div class="connection-actions">
              <button @click.stop="testModuleConnection(module)" class="test-btn" :disabled="module.testing" title="Test connection">
                {{ module.testing ? '‚è≥' : 'üîÑ' }}
              </button>
              <button @click.stop="removeModule(module)" class="remove-btn" title="Remove connection">
                √ó
              </button>
            </div>
          </div>
          <div class="connection-details">
            <div class="connection-info">
              <span class="endpoint">{{ module.host }}:{{ module.port }}</span>
              <span class="service-name">{{ module.serviceName || 'Auto-detected' }}</span>
              <span v-if="module.lastChecked" class="last-checked">
                Last checked: {{ formatTime(module.lastChecked) }}
              </span>
            </div>
            <div class="connection-controls">
              <button @click.stop="testAndNavigate(module)" class="action-btn action-btn-small">
                Test Module ‚Üí
              </button>
            </div>
          </div>
        </div>
        
        <!-- Add New Module Card -->
        <div class="connection-card add-new-card" @click="startAddingNew">
          <div class="add-new-content">
            <span class="add-icon">+</span>
            <h3>Add New Module</h3>
            <p>Configure another pipeline module connection</p>
          </div>
        </div>
      </div>
    </div>

    <div class="config-container">
      <div class="config-form">
        <div class="form-header">
          <h2>{{ isEditing ? `Edit ${config.moduleType || 'Module'} Connection` : 'Add New Connection' }}</h2>
          <div class="form-header-actions">
            <button v-if="isEditing" @click="clearForm" class="btn btn-secondary btn-small">
              Cancel Edit
            </button>
            <button v-if="existingModules.length === 0" @click="clearForm" class="btn btn-secondary btn-small">
              Clear Form
            </button>
          </div>
        </div>
        
        <div class="form-section">
          <h2>Module Configuration</h2>
          
          <div class="form-group">
            <label for="moduleType">Module Type</label>
            <select 
              id="moduleType" 
              v-model="config.moduleType" 
              @change="updateDefaultPort"
              class="form-input"
            >
              <option value="">Select Module Type</option>
              <option value="parser">Parser Module</option>
              <option value="chunker">Chunker Module</option>
              <option value="embedder">Embedder Module</option>
              <option value="tika">Tika Parser Module</option>
              <option value="custom">Custom Module</option>
            </select>
          </div>

          <div class="form-row">
            <div class="form-group">
              <label for="host">Host</label>
              <input 
                id="host"
                type="text" 
                v-model="config.host" 
                placeholder="localhost"
                class="form-input"
              >
            </div>
            
            <div class="form-group">
              <label for="port">Port</label>
              <input 
                id="port"
                type="number" 
                v-model="config.port" 
                placeholder="39101"
                class="form-input"
              >
            </div>
          </div>

          <div class="form-group">
            <label for="serviceName">Service Name (Optional)</label>
            <input 
              id="serviceName"
              type="text" 
              v-model="config.serviceName" 
              placeholder="Auto-detected from module"
              class="form-input"
            >
            <small class="form-help">
              Leave empty to auto-detect from module OpenAPI specification
            </small>
          </div>
        </div>

        <div class="form-section">
          <h2>Connection Options</h2>
          
          <div class="form-group">
            <label class="checkbox-label">
              <input 
                type="checkbox" 
                v-model="config.useTLS" 
                class="form-checkbox"
              >
              Use TLS/SSL
            </label>
          </div>

          <div class="form-group">
            <label for="timeout">Timeout (seconds)</label>
            <input 
              id="timeout"
              type="number" 
              v-model="config.timeout" 
              min="1" 
              max="300"
              class="form-input"
            >
          </div>
        </div>

        <div class="form-actions">
          <button 
            @click="testConnection" 
            :disabled="!canConnect || isConnecting"
            class="btn btn-secondary"
          >
            {{ isConnecting ? 'Testing...' : 'Test Connection' }}
          </button>
          
          <button 
            @click="saveConfiguration" 
            :disabled="!canConnect"
            class="btn btn-primary"
          >
            Save & Connect
          </button>
        </div>
      </div>

      <div class="config-preview">
        <h2>Configuration Preview</h2>
        <div class="preview-content">
          <div class="preview-item">
            <strong>Endpoint:</strong> 
            <code>{{ connectionString }}</code>
          </div>
          
          <div class="preview-item">
            <strong>Module Type:</strong> 
            {{ config.moduleType || 'Not selected' }}
          </div>
          
          <div class="preview-item">
            <strong>TLS:</strong> 
            {{ config.useTLS ? 'Enabled' : 'Disabled' }}
          </div>
          
          <div class="preview-item">
            <strong>Timeout:</strong> 
            {{ config.timeout }}s
          </div>
        </div>

        <div v-if="connectionStatus" class="status-section">
          <h3>Connection Status</h3>
          <div class="status-message" :class="connectionStatus.type">
            <span class="status-icon">
              {{ connectionStatus.type === 'success' ? '‚úÖ' : connectionStatus.type === 'error' ? '‚ùå' : '‚ÑπÔ∏è' }}
            </span>
            {{ connectionStatus.message }}
          </div>
        </div>

        <div v-if="moduleInfo" class="module-info">
          <h3>Module Information</h3>
          <div class="info-grid">
            <div class="info-item">
              <strong>Name:</strong> {{ moduleInfo.name }}
            </div>
            <div class="info-item">
              <strong>Version:</strong> {{ moduleInfo.version }}
            </div>
            <div class="info-item">
              <strong>Schema:</strong> {{ moduleInfo.hasSchema ? 'Available' : 'Not found' }}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
export default {
  name: 'ConfigureClient',
  data() {
    return {
      config: {
        moduleType: '',
        host: 'localhost',
        port: '',
        serviceName: '',
        useTLS: false,
        timeout: 30
      },
      isConnecting: false,
      connectionStatus: null,
      moduleInfo: null,
      isEditing: false,
      editingModuleId: null,
      existingModules: [],
      moduleDefaults: {
        parser: { port: 39101, serviceName: 'parser' },
        chunker: { port: 39102, serviceName: 'chunker' },
        embedder: { port: 39103, serviceName: 'embedder' },
        tika: { port: 39104, serviceName: 'tika-parser' }
      }
    }
  },
  computed: {
    canConnect() {
      return this.config.host && this.config.port && this.config.moduleType
    },
    connectionString() {
      if (!this.config.host || !this.config.port) return 'Host and port required'
      const protocol = this.config.useTLS ? 'grpcs' : 'grpc'
      return `${protocol}://${this.config.host}:${this.config.port}`
    },
    debugSavedData() {
      return localStorage.getItem('pipelineClientConfig') || 'null'
    }
  },
  methods: {
    updateDefaultPort() {
      if (this.config.moduleType && this.moduleDefaults[this.config.moduleType]) {
        const defaults = this.moduleDefaults[this.config.moduleType]
        this.config.port = defaults.port
        if (!this.config.serviceName) {
          this.config.serviceName = defaults.serviceName
        }
      }
    },
    
    async testConnection() {
      this.isConnecting = true
      this.connectionStatus = null
      this.moduleInfo = null

      try {
        // Perform real gRPC health check
        const { checkModuleHealth } = await import('../services/grpcHealthCheck.js')
        const result = await checkModuleHealth(
          this.config.host,
          this.config.port,
          this.config.useTLS,
          this.config.timeout ? this.config.timeout * 1000 : 5000
        )
        
        if (result.status === 'connected') {
          this.connectionStatus = {
            type: 'success',
            message: `gRPC health check passed for ${this.config.moduleType} module`
          }
          
          // Mock module info - in future this could come from the module's gRPC API
          this.moduleInfo = {
            name: this.config.serviceName || this.config.moduleType,
            version: '1.0.0',
            hasSchema: true
          }
        } else {
          this.connectionStatus = {
            type: 'error',
            message: result.message
          }
        }
        
      } catch (error) {
        this.connectionStatus = {
          type: 'error',
          message: `gRPC health check failed: ${error.message}`
        }
      } finally {
        this.isConnecting = false
      }
    },
    
    async saveConfiguration() {
      console.log('üíæ SAVE - Starting to save config:', this.config)
      
      // Save configuration using multi-module approach
      this.saveModuleConfig(this.config)
      
      this.connectionStatus = {
        type: 'info',
        message: 'Configuration saved successfully'
      }
      
      console.log('üíæ SAVE - Configuration saved, reloading modules...')
      
      // Reload existing modules to show updated list
      this.loadExistingModules()
      
      // Auto-navigate to testing view after successful save
      await new Promise(resolve => setTimeout(resolve, 1000)) // Brief delay to show save message
      this.$emit('navigate', 'testing')
    },
    
    saveModuleConfig(newConfig) {
      const moduleId = this.generateModuleId(newConfig)
      console.log('üíæ SAVE MODULE - Module ID:', moduleId)
      console.log('üíæ SAVE MODULE - New config:', newConfig)
      
      // Get existing saved modules
      const existing = this.getSavedModules()
      console.log('üíæ SAVE MODULE - Existing modules:', existing)
      
      // Find if this module already exists (same host:port:type)
      const existingIndex = existing.findIndex(config => 
        this.generateModuleId(config) === moduleId
      )
      console.log('üíæ SAVE MODULE - Existing index:', existingIndex)
      
      if (existingIndex >= 0) {
        // Update existing module
        existing[existingIndex] = { ...existing[existingIndex], ...newConfig }
        console.log('üíæ SAVE MODULE - Updated existing module at index', existingIndex)
      } else {
        // Add new module
        existing.push(newConfig)
        console.log('üíæ SAVE MODULE - Added new module, total count:', existing.length)
      }
      
      console.log('üíæ SAVE MODULE - Final array to save:', existing)
      
      // Save back to localStorage
      localStorage.setItem('pipelineClientConfig', JSON.stringify(existing))
      console.log('üíæ SAVE MODULE - Saved to localStorage')
      
      // Verify what was actually saved
      const verification = localStorage.getItem('pipelineClientConfig')
      console.log('üíæ SAVE MODULE - Verification read:', verification)
      
      // Also save this specific config for the testing view
      localStorage.setItem('currentModuleConfig', JSON.stringify(newConfig))
    },
    
    getSavedModules() {
      const saved = localStorage.getItem('pipelineClientConfig')
      console.log('üîç getSavedModules - Raw localStorage:', saved)
      
      if (!saved) {
        console.log('üîç getSavedModules - No data found, returning []')
        return []
      }
      
      try {
        const config = JSON.parse(saved)
        console.log('üîç getSavedModules - Parsed config:', config)
        console.log('üîç getSavedModules - Is array?', Array.isArray(config))
        console.log('üîç getSavedModules - config.moduleType:', config.moduleType)
        console.log('üîç getSavedModules - config.host:', config.host)
        console.log('üîç getSavedModules - config.port:', config.port, typeof config.port)
        
        // Handle both single config and array of configs for backwards compatibility
        if (Array.isArray(config)) {
          console.log('üîç getSavedModules - Returning array:', config)
          return config
        } else if (config.moduleType && config.host && (config.port || config.port === 0)) {
          console.log('üîç getSavedModules - Converting single config to array:', [config])
          return [config]
        }
        
        console.log('üîç getSavedModules - Config does not match expected format, returning []')
        console.log('üîç getSavedModules - Failed condition check: moduleType =', !!config.moduleType, 'host =', !!config.host, 'port =', !!(config.port || config.port === 0))
        return []
      } catch (error) {
        console.warn('Failed to load saved modules:', error)
        return []
      }
    },
  
  mounted() {
    console.log('ConfigureClient mounted')
    
    // Load existing modules first
    this.loadExistingModules()
    
    // Try to load current module config (set when navigating from main screen)
    const currentConfig = localStorage.getItem('currentModuleConfig')
    if (currentConfig) {
      try {
        const configToLoad = JSON.parse(currentConfig)
        localStorage.removeItem('currentModuleConfig') // Clear after loading
        this.editModule(configToLoad)
      } catch (error) {
        console.warn('Failed to load current module config:', error)
      }
    }
  },
  
    loadExistingModules() {
      const modules = this.getSavedModules()
      console.log('Loading existing modules:', modules)
      
      this.existingModules = modules.map(module => ({
        ...module,
        status: module.status || 'disconnected',
        lastChecked: module.lastChecked ? new Date(module.lastChecked) : null,
        testing: false
      }))
      
      console.log('Processed existing modules:', this.existingModules)
      
      // Check initial connection status for all modules
      this.checkAllModuleConnections()
    },
    
    async checkAllModuleConnections() {
      for (const module of this.existingModules) {
        await this.checkModuleConnectionStatus(module)
      }
    },
    
    async checkModuleConnectionStatus(module) {
      module.status = 'checking'
      
      try {
        // Perform real gRPC health check
        const { checkModuleHealth } = await import('../services/grpcHealthCheck.js')
        const result = await checkModuleHealth(
          module.host,
          module.port,
          module.useTLS,
          module.timeout ? module.timeout * 1000 : 5000
        )
        
        module.status = result.status
        module.healthMessage = result.message
        
      } catch (error) {
        console.error('gRPC health check failed:', error)
        module.status = 'disconnected'
        module.healthMessage = `Health check error: ${error.message}`
      } finally {
        module.lastChecked = new Date()
      }
    },
    
    isEditingModule(module) {
      return this.isEditing && this.editingModuleId === this.generateModuleId(module)
    },
    
    editModule(module) {
      this.config = { ...this.config, ...module }
      this.isEditing = true
      this.editingModuleId = this.generateModuleId(module)
      this.connectionStatus = null
      this.moduleInfo = null
      
      // Scroll to form
      this.$nextTick(() => {
        const formElement = this.$el.querySelector('.config-form')
        if (formElement) {
          formElement.scrollIntoView({ behavior: 'smooth', block: 'start' })
        }
      })
    },
    
    startAddingNew() {
      this.clearForm()
      // Scroll to form
      this.$nextTick(() => {
        const formElement = this.$el.querySelector('.config-form')
        if (formElement) {
          formElement.scrollIntoView({ behavior: 'smooth', block: 'start' })
        }
      })
    },
    
    clearForm() {
      this.config = {
        moduleType: '',
        host: 'localhost',
        port: '',
        serviceName: '',
        useTLS: false,
        timeout: 30
      }
      this.isEditing = false
      this.editingModuleId = null
      this.connectionStatus = null
      this.moduleInfo = null
    },
    
    async testModuleConnection(module) {
      module.testing = true
      await this.checkModuleConnectionStatus(module)
      module.testing = false
    },
    
    async testAndNavigate(module) {
      // Set this module as current and navigate to testing
      localStorage.setItem('currentModuleConfig', JSON.stringify(module))
      this.$emit('navigate', 'testing')
    },
    
    removeModule(moduleToRemove) {
      if (!confirm(`Are you sure you want to remove the ${moduleToRemove.moduleType} connection?`)) {
        return
      }
      
      const moduleId = this.generateModuleId(moduleToRemove)
      const existing = this.getSavedModules()
      const filtered = existing.filter(config => 
        this.generateModuleId(config) !== moduleId
      )
      
      localStorage.setItem('pipelineClientConfig', JSON.stringify(filtered))
      this.loadExistingModules()
      
      // If we were editing this module, clear the form
      if (this.editingModuleId === moduleId) {
        this.clearForm()
      }
    },
    
    getStatusClass(status) {
      return {
        'connected': status === 'connected',
        'checking': status === 'checking',
        'disconnected': status === 'disconnected'
      }
    },
    
    getStatusText(status) {
      const statusMap = {
        'connected': 'Connected',
        'disconnected': 'Disconnected', 
        'checking': 'Checking...'
      }
      return statusMap[status] || 'Unknown'
    },
    
    formatTime(date) {
      if (!date) return 'Never'
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })
    },
    
    generateModuleId(config) {
      return `${config.moduleType}-${config.host}-${config.port}`
    }
  }
}
</script>

<style scoped>
.configure-client {
  padding: 2rem;
  max-width: 1200px;
  margin: 0 auto;
}

.page-header {
  margin-bottom: 2rem;
}

.page-header h1 {
  font-size: 2rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 0.5rem;
}

.page-header p {
  color: #64748b;
  font-size: 1.125rem;
}

.config-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 2rem;
}

.config-form, .config-preview {
  background: white;
  border-radius: 12px;
  padding: 2rem;
  box-shadow: 0 4px 6px rgba(0,0,0,0.05);
  border: 1px solid #e2e8f0;
}

.form-section {
  margin-bottom: 2rem;
}

.form-section h2 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 1rem;
  padding-bottom: 0.5rem;
  border-bottom: 1px solid #e2e8f0;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-row {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: 1rem;
}

label {
  display: block;
  font-weight: 500;
  color: #374151;
  margin-bottom: 0.5rem;
}

.form-input {
  width: 100%;
  padding: 0.75rem;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  font-size: 0.875rem;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.form-input:focus {
  outline: none;
  border-color: #667eea;
  box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
}

.form-help {
  display: block;
  margin-top: 0.25rem;
  font-size: 0.75rem;
  color: #6b7280;
}

.checkbox-label {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  cursor: pointer;
}

.form-checkbox {
  width: auto;
  margin: 0;
}

.existing-connections {
  margin-bottom: 2rem;
}

.existing-connections h2 {
  font-size: 1.5rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 1.5rem;
}

.connections-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.connection-card {
  background: white;
  border-radius: 8px;
  padding: 1.5rem;
  border: 1px solid #e2e8f0;
  cursor: pointer;
  transition: all 0.2s;
}

.connection-card:hover {
  border-color: #667eea;
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.connection-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 0.75rem;
}

.connection-header h3 {
  font-size: 1.125rem;
  font-weight: 600;
  color: #1e293b;
  margin: 0;
  text-transform: capitalize;
}

.remove-btn {
  background: none;
  border: none;
  color: #dc2626;
  font-size: 1.25rem;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  transition: background-color 0.2s;
}

.remove-btn:hover {
  background-color: #fee2e2;
}

.connection-details {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
}

.endpoint {
  font-family: monospace;
  font-size: 0.875rem;
  color: #4b5563;
  background: #f3f4f6;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  width: fit-content;
}

.service-name {
  font-size: 0.75rem;
  color: #6b7280;
}

.form-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid #e2e8f0;
}

.form-header h2 {
  margin: 0;
  font-size: 1.25rem;
  font-weight: 600;
  color: #1e293b;
}

.btn-small {
  padding: 0.5rem 1rem;
  font-size: 0.875rem;
}

.connection-card.editing {
  border-color: #667eea;
  background: #f0f4ff;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);
}

.connection-card.connected {
  border-left: 4px solid #16a34a;
}

.connection-title {
  flex: 1;
}

.connection-status {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-top: 0.25rem;
  font-size: 0.75rem;
}

.status-dot {
  width: 6px;
  height: 6px;
  border-radius: 50%;
  transition: background-color 0.2s;
}

.status-dot.connected {
  background-color: #16a34a;
}

.status-dot.disconnected {
  background-color: #dc2626;
}

.status-dot.checking {
  background-color: #f59e0b;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

.status-text {
  color: #6b7280;
  font-weight: 500;
}

.connection-actions {
  display: flex;
  gap: 0.5rem;
  align-items: center;
}

.test-btn {
  background: none;
  border: none;
  font-size: 1rem;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  transition: background-color 0.2s;
  color: #667eea;
}

.test-btn:hover:not(:disabled) {
  background-color: #e0e7ff;
}

.test-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.connection-info {
  flex: 1;
}

.connection-controls {
  margin-top: 0.75rem;
}

.last-checked {
  font-size: 0.625rem;
  color: #9ca3af;
  margin-top: 0.25rem;
  display: block;
}

.add-new-card {
  border: 2px dashed #d1d5db;
  background: #f9fafb;
  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 150px;
  transition: all 0.2s;
}

.add-new-card:hover {
  border-color: #667eea;
  background: #f0f4ff;
  transform: none;
}

.add-new-content {
  text-align: center;
}

.add-icon {
  font-size: 2rem;
  color: #9ca3af;
  display: block;
  margin-bottom: 0.5rem;
}

.add-new-card h3 {
  color: #6b7280;
  margin-bottom: 0.5rem;
}

.add-new-card p {
  color: #9ca3af;
  font-size: 0.875rem;
}

.form-header-actions {
  display: flex;
  gap: 0.5rem;
}

.action-btn-small {
  padding: 0.5rem 1rem;
  font-size: 0.75rem;
}

.form-actions {
  display: flex;
  gap: 1rem;
  padding-top: 1rem;
  border-top: 1px solid #e2e8f0;
}

.btn {
  padding: 0.75rem 1.5rem;
  border-radius: 6px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  border: none;
  font-size: 0.875rem;
}

.btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.btn-primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
}

.btn-primary:hover:not(:disabled) {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
}

.btn-secondary {
  background: #f8fafc;
  color: #374151;
  border: 1px solid #d1d5db;
}

.btn-secondary:hover:not(:disabled) {
  background: #f1f5f9;
}

.config-preview h2 {
  font-size: 1.25rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 1rem;
}

.preview-content {
  margin-bottom: 1.5rem;
}

.preview-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 0;
  border-bottom: 1px solid #f1f5f9;
}

.preview-item:last-child {
  border-bottom: none;
}

.preview-item code {
  background: #f1f5f9;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-family: 'Monaco', 'Menlo', monospace;
  font-size: 0.75rem;
}

.status-section, .module-info {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 1px solid #e2e8f0;
}

.status-section h3, .module-info h3 {
  font-size: 1rem;
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 0.75rem;
}

.status-message {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem;
  border-radius: 6px;
  font-size: 0.875rem;
}

.status-message.success {
  background: #dcfce7;
  color: #166534;
  border: 1px solid #bbf7d0;
}

.status-message.error {
  background: #fee2e2;
  color: #991b1b;
  border: 1px solid #fecaca;
}

.status-message.info {
  background: #dbeafe;
  color: #1e40af;
  border: 1px solid #bfdbfe;
}

.info-grid {
  display: grid;
  gap: 0.5rem;
}

.info-item {
  display: flex;
  justify-content: space-between;
  padding: 0.5rem 0;
  border-bottom: 1px solid #f1f5f9;
  font-size: 0.875rem;
}

.info-item:last-child {
  border-bottom: none;
}

@media (max-width: 768px) {
  .config-container {
    grid-template-columns: 1fr;
  }
  
  .form-row {
    grid-template-columns: 1fr;
  }
  
  .form-actions {
    flex-direction: column;
  }
}
</style>