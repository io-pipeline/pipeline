package io.pipeline.module.opensearchsink.config;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.eclipse.microprofile.openapi.annotations.media.Schema;

import java.util.Optional;

/**
 * DRAFT - A reference point for our design conversation.
 * Defines the k-NN algorithm, engine, and parameters.
 */
@Schema(name = "KnnMethod",
        description = "Defines the default k-NN search method and parameters. This configuration is used as a fallback when an incoming document " +
                      "needs a new vector field created in the index and no specific parameters have been provided by an upstream service. " +
                      "This allows an administrator to set a baseline performance and resource usage strategy for the entire service.")
public record KnnMethod(
    @JsonProperty("engine")
    @Schema(description = "The backend engine to use for k-NN search. While other engines like Faiss may be supported in the future, " +
                      "only the LUCENE engine is available in this version. This is a strategic choice to ensure full compatibility with OpenSearch's powerful " +
                      "hybrid search capabilities (i.e., combining vector search with traditional text or keyword filters), as the Lucene engine provides the most efficient pre-filtering.",
            defaultValue = "LUCENE")
    KnnEngine engine,

    @JsonProperty("space_type")
    @Schema(description = "The mathematical vector space used to calculate the 'distance' or 'similarity' between vectors. The choice of space is critical and should match the training methodology of the embedding model. " +
                      "For most modern text embedding models (e.g., SBERT, E5), COSINESIMIL is the correct choice as it measures the angle between vectors, ignoring magnitude. " +
                      "L2 (standard Euclidean distance) is appropriate for models where vector magnitude is a meaningful signal. INNERPRODUCT is a specialized option that is only equivalent to cosine similarity if the vectors are perfectly normalized to unit length.",
            defaultValue = "COSINESIMIL")
    SpaceType spaceType,

    @JsonProperty("parameters")
    @Schema(description = "A nested object containing the specific tuning parameters for the HNSW algorithm within the selected engine.")
    Optional<KnnParameters> parameters
) {
    @Schema(name = "KnnEngine",
            description = "The underlying library used to perform the approximate nearest neighbor search.")
    public enum KnnEngine {
        /**
         * Use the native Apache Lucene engine. This is the recommended default as it is tightly integrated with OpenSearch and supports the most efficient form of pre-filtering for hybrid search.
         */
        @Schema(description = "Use the native Apache Lucene engine. Recommended for its tight integration and hybrid search support.")
        LUCENE
        // FAISS will be added in a future version to support billion-scale indexes and advanced quantization.
    }

    @Schema(name = "SpaceType",
            description = "The mathematical space used to calculate distance between vectors.")
    public enum SpaceType {
        /**
         * Standard Euclidean distance (L2 norm). A good choice for vectors where magnitude is a meaningful part of the similarity calculation.
         */
        @Schema(description = "Standard Euclidean distance (L2 norm). A good choice for vectors where magnitude is a meaningful part of the similarity calculation.")
        L2,

        /**
         * Cosine similarity. Measures the cosine of the angle between two vectors, effectively ignoring their magnitude. This is generally the best and most common choice for text embeddings generated by transformer models.
         */
        @Schema(description = "Cosine similarity. Measures the cosine of the angle between two vectors, effectively ignoring their magnitude. This is generally the best and most common choice for text embeddings generated by transformer models.")
        COSINESIMIL,

        /**
         * The dot product of two vectors. This is mathematically equivalent to cosine similarity ONLY if the vectors are normalized to unit length. Use with caution.
         */
        @Schema(description = "The dot product of two vectors. This is mathematically equivalent to cosine similarity ONLY if the vectors are normalized to unit length. Use with caution.")
        INNERPRODUCT
    }
}
