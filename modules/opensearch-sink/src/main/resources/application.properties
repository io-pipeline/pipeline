quarkus.application.name=opensearch

# Production port allocation
quarkus.http.port=39004
quarkus.http.host=0.0.0.0
quarkus.grpc.server.use-separate-server=false

# Development override
%dev.quarkus.http.port=39104
%dev.quarkus.http.host=0.0.0.0

# gRPC Client pointing to registration service via Stork/Consul
quarkus.grpc.clients.registration-service.host=registration-service
quarkus.grpc.clients.registration-service.name-resolver=stork

# gRPC Client for the opensearch-sink service (used by REST endpoints)
quarkus.grpc.clients.opensearchSink.host=localhost
quarkus.grpc.clients.opensearchSink.port=39104

# Stork service discovery configuration
quarkus.stork.registration-service.service-discovery.type=consul
quarkus.stork.registration-service.service-discovery.consul-host=${CONSUL_HOST:consul}
quarkus.stork.registration-service.service-discovery.consul-port=${CONSUL_PORT:8500}

# Development override - use localhost Consul in dev mode  
%dev.quarkus.stork.registration-service.service-discovery.consul-host=localhost

# Module configuration
module.name=opensearch
module.type=sink
module.description=OpenSearch vector indexing sink with dynamic schema creation

# Enable gRPC reflection service for production (enabled by default in dev)
quarkus.grpc.server.enable-reflection-service=true

# Health check configuration - use localhost for local development
module.health.check.host=localhost

# Enable OpenAPI and Swagger UI
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/swagger-ui

# gRPC Message Size Configuration (2GB - 1 byte, max int value)
quarkus.grpc.server.max-inbound-message-size=2147483647
quarkus.grpc.clients.opensearchSink.max-inbound-message-size=2147483647

# Logging Configuration - reduce noise
quarkus.log.level=INFO
quarkus.log.category."io.pipeline".level=DEBUG
quarkus.log.category."io.vertx.ext.consul".level=WARN
quarkus.log.category."io.quarkus.grpc".level=WARN

# JVM Memory settings for large message processing
quarkus.native.additional-build-args=-J-Xmx4g
%dev.quarkus.devservices.timeout=120s

# Test settings  
%test.quarkus.http.port=0

# Processing buffer configuration (for interceptor testing)
processing.buffer.enabled=false
processing.buffer.capacity=100
processing.buffer.directory=target/test-data
processing.buffer.prefix=opensearch-sink

# Enable buffer in dev mode for testing
%dev.processing.buffer.enabled=true

# OpenSearch Configuration  
opensearch.hosts=localhost:9200
opensearch.protocol=http
opensearch.username=${OPENSEARCH_USERNAME:}
opensearch.password=${OPENSEARCH_PASSWORD:}
opensearch.connection-timeout=30s
opensearch.socket-timeout=30s
opensearch.max-connections=20
opensearch.ssl-verify=false
opensearch.ssl-verify-hostname=false

# Default index settings for dynamic schema creation
opensearch.default.index-prefix=documents
opensearch.default.vector-dimension=384
opensearch.default.vector-algorithm=hnsw
opensearch.default.vector-space-type=cosine

# =============================================
# Docker Compose Dev Service Configuration
# =============================================
# This section enables Quarkus to manage OpenSearch via a docker-compose file
# for local development and testing, overriding the default OpenSearch configuration.

# Only enable for dev and test profiles
%dev.quarkus.devservices.enabled=true
%test.quarkus.devservices.enabled=true

# Point to the docker-compose file
%dev.quarkus.devservices.docker-compose.file-path=docker-compose.yml
%test.quarkus.devservices.docker-compose.file-path=docker-compose.yml

# Use the 'opensearch' service from the compose file
%dev.quarkus.devservices.docker-compose.service-name=opensearch
%test.quarkus.devservices.docker-compose.service-name=opensearch

# This tells dev services to manage the 'opensearch' feature.
# It will automatically configure quarkus.opensearch.hosts for us.
%dev.quarkus.devservices.docker-compose.features=opensearch
%test.quarkus.devservices.docker-compose.features=opensearch

# Make the service shared so it doesn't stop on exit
%dev.quarkus.devservices.shared=true
%dev.quarkus.devservices.keep-running-on-exit=true

# =============================================
# Shared Redis Dev Service Configuration
# =============================================
# This connects to the shared Redis instance managed by pipedoc-repository-service
# or starts it if it's not running.

%dev.quarkus.redis.devservices.enabled=true
%dev.quarkus.redis.devservices.service-name=pipeline-redis
%dev.quarkus.redis.devservices.shared=true
%dev.quarkus.redis.devservices.reuse=true
%dev.quarkus.redis.devservices.volumes."pipeline-redis-data"=/data
%dev.quarkus.redis.devservices.container-env.REDIS_ARGS=--appendonly yes --appendfsync everysec

# For tests, use a separate, non-shared Redis to ensure isolation
%test.quarkus.redis.devservices.enabled=true
%test.quarkus.redis.devservices.service-name=pipeline-redis-test
%test.quarkus.redis.devservices.shared=false
