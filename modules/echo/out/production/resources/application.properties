quarkus.application.name=echo

# HTTP and gRPC unified server configuration
quarkus.http.port=39100
quarkus.grpc.server.use-separate-server=false
quarkus.grpc.server.host=0.0.0.0
quarkus.grpc.server.enable-reflection-service=true
quarkus.grpc.server.max-inbound-message-size=1073741824

# Module registration configuration  
module.auto-register.enabled=true
module.version=1.0.0
module.type=echo-processor
module.metadata=category=testing,complexity=simple
registration.service.host=registration-service
registration.service.port=39100

# Consul configuration (for service discovery)
consul.host=${CONSUL_HOST:consul}
consul.port=${CONSUL_PORT:8500}

# gRPC client configuration for registration service  
# The host will be resolved by Stork using the service name
quarkus.grpc.clients.registration-service.host=registration-service
quarkus.grpc.clients.registration-service.port=39100

# gRPC client configuration for echoService (self-reference for REST API)
quarkus.grpc.clients.echoService.host=localhost
quarkus.grpc.clients.echoService.port=39100
%dev.quarkus.grpc.clients.echoService.port=38005

# Stork service discovery for registration-service
quarkus.stork.registration-service.service-discovery.type=consul
quarkus.stork.registration-service.service-discovery.consul-host=${CONSUL_HOST:consul}
quarkus.stork.registration-service.service-discovery.consul-port=${CONSUL_PORT:8500}

# Health check
quarkus.smallrye-health.root-path=/health

# Logging
quarkus.log.level=INFO
quarkus.log.category."com.rokkon".level=DEBUG

# Index dependencies for CDI bean discovery
quarkus.index-dependency.pipeline-api.group-id=com.pipeline
quarkus.index-dependency.pipeline-api.artifact-id=pipeline-api

# OpenAPI/Swagger
quarkus.smallrye-openapi.path=/q/openapi
quarkus.smallrye-openapi.info-title=Echo Module API
quarkus.smallrye-openapi.info-version=1.0.0
quarkus.smallrye-openapi.info-description=REST API for the Echo gRPC Module
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.path=/q/swagger-ui

# Container image config
quarkus.container-image.build=false
quarkus.container-image.push=false
quarkus.container-image.group=pipeline
quarkus.container-image.name=echo
quarkus.container-image.tag=latest

# Metrics
quarkus.micrometer.enabled=true
quarkus.micrometer.export.prometheus.enabled=true

# OpenTelemetry configuration
quarkus.otel.enabled=true
quarkus.otel.metrics.enabled=true
quarkus.otel.logs.enabled=true

# Dev Services for Observability
%dev.quarkus.observability.enabled=false
%dev.quarkus.observability.lgtm.grafana.ui.enabled=false
%dev.quarkus.otel.enabled=false
%dev.quarkus.otel.sdk.disabled=true
%dev.quarkus.otel.exporter.otlp.endpoint=
%dev.quarkus.http.port=38005
%dev.quarkus.http.host=0.0.0.0

# Enable auto-registration to trigger Consul need
%dev.module.auto-register.enabled=true

# Dev mode overrides for local development
%dev.quarkus.grpc.clients.registration-service.host=localhost
%dev.quarkus.grpc.clients.registration-service.port=38001
%dev.registration.service.host=localhost
%dev.registration.service.port=38001

# Test profile
%test.quarkus.grpc.server.port=0
%test.quarkus.otel.enabled=false
%test.quarkus.otel.sdk.disabled=true
%test.quarkus.otel.exporter.otlp.endpoint=

# Disable OTLP export in prod unless configured
%prod.quarkus.otel.exporter.otlp.endpoint=${OTEL_EXPORTER_OTLP_ENDPOINT:}