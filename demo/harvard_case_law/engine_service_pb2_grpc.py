# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import engine_service_pb2 as engine__service__pb2
import pipeline_core_types_pb2 as pipeline__core__types__pb2


class PipeStreamEngineStub(object):
    """PipeStreamEngine service orchestrates pipeline execution.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.testPipeStream = channel.unary_unary(
                '/io.pipeline.search.engine.PipeStreamEngine/testPipeStream',
                request_serializer=pipeline__core__types__pb2.PipeStream.SerializeToString,
                response_deserializer=pipeline__core__types__pb2.PipeStream.FromString,
                )
        self.processPipeAsync = channel.unary_unary(
                '/io.pipeline.search.engine.PipeStreamEngine/processPipeAsync',
                request_serializer=pipeline__core__types__pb2.PipeStream.SerializeToString,
                response_deserializer=engine__service__pb2.PipeStreamResponse.FromString,
                )
        self.processPipeStream = channel.stream_stream(
                '/io.pipeline.search.engine.PipeStreamEngine/processPipeStream',
                request_serializer=pipeline__core__types__pb2.PipeStream.SerializeToString,
                response_deserializer=engine__service__pb2.PipeStreamResponse.FromString,
                )


class PipeStreamEngineServicer(object):
    """PipeStreamEngine service orchestrates pipeline execution.
    """

    def testPipeStream(self, request, context):
        """--- Existing RPCs (can be kept for specific internal/advanced use cases or deprecated over time) ---
        --- NOTE: a sink has the same signature - the engine controls the outgoing routing, if it's a sink implementation then that will be noted in the step
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processPipeAsync(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def processPipeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PipeStreamEngineServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'testPipeStream': grpc.unary_unary_rpc_method_handler(
                    servicer.testPipeStream,
                    request_deserializer=pipeline__core__types__pb2.PipeStream.FromString,
                    response_serializer=pipeline__core__types__pb2.PipeStream.SerializeToString,
            ),
            'processPipeAsync': grpc.unary_unary_rpc_method_handler(
                    servicer.processPipeAsync,
                    request_deserializer=pipeline__core__types__pb2.PipeStream.FromString,
                    response_serializer=engine__service__pb2.PipeStreamResponse.SerializeToString,
            ),
            'processPipeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.processPipeStream,
                    request_deserializer=pipeline__core__types__pb2.PipeStream.FromString,
                    response_serializer=engine__service__pb2.PipeStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.pipeline.search.engine.PipeStreamEngine', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PipeStreamEngine(object):
    """PipeStreamEngine service orchestrates pipeline execution.
    """

    @staticmethod
    def testPipeStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pipeline.search.engine.PipeStreamEngine/testPipeStream',
            pipeline__core__types__pb2.PipeStream.SerializeToString,
            pipeline__core__types__pb2.PipeStream.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processPipeAsync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/io.pipeline.search.engine.PipeStreamEngine/processPipeAsync',
            pipeline__core__types__pb2.PipeStream.SerializeToString,
            engine__service__pb2.PipeStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def processPipeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/io.pipeline.search.engine.PipeStreamEngine/processPipeStream',
            pipeline__core__types__pb2.PipeStream.SerializeToString,
            engine__service__pb2.PipeStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
